#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#include <unordered_map>

int calculateDiameter(const std::vector<std::vector<int>>& edges, int numComputers) {
    // Создаем список смежности
    std::vector<std::vector<int>> adj(numComputers);
    for (const auto& edge : edges) {
        int u = edge[0];
        int v = edge[1];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    int diameter = 0;

    // Для каждого узла выполняем BFS
    for (int start = 0; start < numComputers; ++start) {
        std::vector<int> distances(numComputers, -1);
        std::queue<int> q;
        q.push(start);
        distances[start] = 0;

        while (!q.empty()) {
            int current = q.front();
            q.pop();

            for (int neighbor : adj[current]) {
                if (distances[neighbor] == -1) {
                    distances[neighbor] = distances[current] + 1;
                    q.push(neighbor);
                }
            }
        }

        // Находим максимальное расстояние для текущего стартового узла
        int max_dist = *max_element(distances.begin(), distances.end());
        if (max_dist > diameter) {
            diameter = max_dist;
        }
    }

    return diameter;
}

int main() {
    std::vector<std::vector<int>> connections = {
        {5, 56}, {35, 72}, {60, 72}, {6, 57}, {3, 66}, {52, 68}, {42, 41}, {50, 28}, {73, 70}, {25, 18}, 
        {21, 15}, {10, 53}, {29, 54}, {63, 59}, {22, 45}, {21, 13}, {69, 46}, {67, 62}, {20, 27}, {14, 44}, 
        {39, 58}, {31, 49}, {40, 45}, {23, 61}, {7, 73}, {44, 62}, {51, 8}, {68, 72}, {59, 8}, {31, 48}, 
        {9, 17}, {31, 36}, {41, 31}, {47, 62}, {66, 59}, {56, 68}, {54, 10}, {11, 39}, {33, 45}, {71, 65}, 
        {16, 30}, {12, 23}, {50, 11}, {37, 18}, {1, 21}, {74, 17}, {4, 3}, {23, 58}, {9, 26}, {18, 2}, 
        {1, 29}, {57, 71}, {60, 16}, {55, 34}, {42, 6}, {18, 46}, {14, 35}, {6, 74}, {10, 34}, {19, 64}, 
        {24, 6}, {20, 2}, {16, 64}, {43, 9}, {46, 10}, {73, 59}, {60, 58}, {2, 32}, {54, 33}, {66, 14}, 
        {0, 20}, {30, 37}, {38, 65}, {48, 58}, {67, 46}, {49, 2}, {30, 60}, {57, 37}, {38, 43}, {69, 46}, 
        {33, 53}, {70, 14}, {37, 4}, {37, 58}, {7, 65}, {66, 26}, {52, 11}, {50, 2}, {70, 24}, {38, 45}, 
        {58, 70}, {12, 37}, {63, 44}, {13, 31}, {16, 26}, {56, 50}, {56, 66}, {59, 40}, {58, 31}, {58, 19}, 
        {55, 69}, {20, 36}, {68, 9}, {36, 42}, {7, 0}, {13, 55}, {42, 43}, {24, 68}, {66, 29}, {35, 73}, 
        {29, 60}, {17, 61}, {32, 9}, {1, 4}, {59, 15}, {18, 52}, {37, 71}, {19, 72}, {33, 34}, {12, 4}, 
        {60, 70}, {67, 37}, {28, 46}, {62, 61}, {38, 69}, {11, 15}, {74, 68}, {37, 37}, {23, 33}, {67, 45}, 
        {53, 38}, {72, 40}, {65, 1}, {25, 1}, {66, 0}, {49, 17}, {64, 43}, {65, 66}, {12, 24}, {22, 19}, 
        {32, 16}, {22, 42}, {29, 5}, {36, 17}, {37, 58}, {13, 45}, {37, 70}, {64, 52}, {2, 74}, {54, 41}, 
        {22, 67}, {9, 22}, {20, 36}, {19, 21}, {19, 32}, {7, 72}, {54, 25}, {71, 31}, {54, 57}, {57, 11}, 
        {53, 69}, {22, 11}, {31, 3}, {34, 48}, {23, 18}, {28, 25}, {70, 71}, {59, 64}, {53, 45}, {22, 71}, 
        {14, 13}, {2, 68}, {64, 50}, {72, 17}, {40, 21}, {55, 9}, {36, 56}, {1, 42}, {63, 69}, {6, 50}, 
        {48, 46}, {19, 29}, {22, 23}, {14, 12}, {8, 4}, {1, 39}, {18, 40}, {17, 44}, {34, 55}, {45, 36}, 
        {48, 30}, {40, 3}, {69, 37}, {63, 4}, {24, 19}, {33, 13}, {3, 14}, {58, 70}, {42, 36}, {48, 29}, 
        {71, 12}, {22, 0}, {40, 13}, {15, 74}, {24, 12}, {19, 72}, {45, 42}, {14, 14}, {21, 33}, {65, 48}, 
        {68, 66}, {69, 26}, {2, 69}, {24, 48}, {23, 50}, {61, 27}, {72, 38}, {41, 72}, {8, 14}, {40, 20}, 
        {73, 20}, {74, 32}, {33, 8}, {73, 2}
    };

    int numComputers = 75;
    int diameter = calculateDiameter(connections, numComputers);

    std::cout << "Diameter of the net is: " << diameter << std::endl;

    return 0;
}